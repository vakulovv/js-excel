// info file
// Быстрая замена двойных кавычек opt+enter

// Package.json необходим, чтобы вести список зависимостей
// Чтобы через систему контроля версий Git не перекидывать большое количество файлов

// CLI нужен для боты с различными командами изи консоли

//  --save-dev флаг, означающий установку завистимостей для разработки, в финальный bundle они не пойдут

// npm run start
// npm run build

// Устаналиваем webpack плагины
// npm install --save-dev html-webpack-plugin
// npm install copy-webpack-plugin --save-dev
// npm install --save-dev clean-webpack-plugin

// Устанавливаем Loaders Webpack сущности,
// пропускающие через себя различные расширения файлов как css
// и превращают их в JavaScript, с чем умеет работать Webpack

// npm install sass-loader sass --save-dev
// npm i -D css-loader

// Устанавливаем babel
// npm install --save-dev babel-loader @babel/core
// и config
// npm install @babel/preset-env --save-dev

// npm i -D cross-env
// npm install webpack-dev-server --save-dev

// npm install --save @babel/polyfill

// Eslint добавляем в режиме разработки

// npm i eslint eslint-loader babel-eslint -D
// npm i -D eslint-config-google

// Новая ветка git
// git checkout -b "css-layout"

// Верстка

// Mormalize.css
// npm install normalize.css
// Позволяет сделать элементы приложения одинаковыми для всех браузеров

// Создаем фреймворк

// Позволяет автоматизировать элементы создания логики приложения



// Структура ООП

// 1. Один компонент Excel, в него входят 4 компонента(Header, toolbar, formula, table)

// Каждый компонент должен иметь прослушку событий. Ввводим формулу, изменения отображаются в талице и наоборот.
// Компонет должен обладать своими внутренними слушателями
// Абстракция DOMListener(базовый класс - это абстракция, декомпозируем логику, не повторять код)
// Наследники DOMListener путем простого API добавлять слушателей
// ExcelComponent наследуется от DOMListener

// DOMListener
// -- Добавление слушателей
// -- Удаление слушателей (чтобы не было утечек памяти)

// Компонент Excel подключает внутренние компоненты и в правльном порядке рендерить их в шаблон
// Excel будет взаимодействовать с любым количеством компонентов, которые мы передадим в него
// и вывести в HTML

// Style guide
// DOM элменты через $el

// Не связывать уровень абстракции и представления!
// Правильно: передавать в класс входные данные selector

// __proto__ унаследованный класс


// static
// npm i D @babel/plugin-proposal-class-properties

// Имплементация это реаализация

// $$ системная переменная

// 2. Событие только на корневой элмент, оптимизация, делегированиее событий
// event.target опредляем элмент с которого вызвано событие
// data-id прослойка между представлением и алгоритмами(мета-данные)
// 2-ой вариант: классы js
// event.target.dataset удобное представление в виде объекта, где ключи это название data атрибута

// Запросы к DOM очень затратные операции

// Для собеседования!
// Чем плох цикл for?
// помимо собственных ключей объекта, пробегает по прототипу объекта. Потенциальная ошибка
// Исправить – проверка if (obj.hasOwnProperties(key))
// Рекомендовано использовать Object.keys()

